pipeline {
    // It's good practice to specify a windows label if you have one
    // agent { label 'windows' } 
    agent any

    environment {
        SONAR_TOKEN = credentials('sonar-token')
        DOCKER_IMAGE = "my-python-app:latest"
    }

    stages {
        stage('Checkout') {
            steps {
                // No changes needed, git is cross-platform
                git branch: 'main', url: 'https://github.com/yourusername/my-python-app.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                // Use 'bat' for Windows commands
                bat '''
                python -m venv venv
                call venv\\Scripts\\activate.bat
                pip install -r requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                bat '''
                echo "Running tests..."
                
                rem Activate the environment for this new shell session
                call venv\\Scripts\\activate.bat
                
                rem Call pytest as a module to ensure the correct executable is found
                python -m pytest tests/ || echo "Tests Failed"
                '''
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    bat '''
                    call venv\\Scripts\\activate.bat
                    rem Use %VAR% for environment variables in batch scripts
                    sonar-scanner -Dsonar.login=%SONAR_TOKEN%
                    '''
                }
            }
        }

        stage('Docker Build') {
            steps {
                // Groovy's ${VAR} syntax works fine with bat
                bat "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Trivy Scan') {
            steps {
                bat "trivy image ${DOCKER_IMAGE}"
            }
        }

        stage('Docker Scout Scan') {
            steps {
                bat "docker scout analyze ${DOCKER_IMAGE}"
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                bat '''
                rem Use backslashes for Windows paths
                kubectl apply -f k8s\\deployment.yaml
                kubectl apply -f k8s\\service.yaml
                '''
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}